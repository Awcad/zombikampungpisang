// #ifndef CASE1_H
// #define CASE1_H
#include <iostream>
#include <string>
#include <vector>
#include <iomanip>
#include <conio.h> // for setw()
#include <cstdlib>
using namespace std;

int numX;
int numY;
int zombies;

void welcome()
{

    cout << "         888     88      88    888888   888    88 " << endl;
    cout << "         888     88      88    88       88 88  88 " << endl;
    cout << "        88888    88      88    88888    88  88 88  " << endl;
    cout << "       88   88   88      88    88       88   8888     " << endl;
    cout << "      88     88  888888  88    888888   88    888  VS   " << endl;
    cout << " " << endl;
    cout << "       888888   8888   888   888  88888   88  888888    " << endl;
    cout << "          88   88  88  88 8 8 88  88   8  88  88 " << endl;
    cout << "         88    88  88  88  8  88  88888   88  88888   " << endl;
    cout << "       88      88  88  88     88  88   8  88  88" << endl;
    cout << "       888888   8888   88     88  88888   88  888888" << endl;
    cout << " " << endl;
    cout << "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$" << endl;
    cout << "    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$" << endl;
    cout << "         $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$" << endl;
    cout << "              $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$" << endl;
    cout << " " << endl;
}
void generateBoard(int &numX, int &numY, vector<vector<char>> &grid)
{
    cout << endl;
    cout << "==============================" << endl;
    cout << "        Board Settings" << endl;
    cout << "==============================" << endl;
    cout << "Please enter odd numbers only" << endl;
    cout << "Enter number of rows=>";
    cin >> numX;

    while (numX % 2 == 0)
    {
        cout << "Invalid! Please enter an odd number" << endl;
        cout << "Enter number of rows=>";
        cin >> numX;
    }
    cout << "Enter number of column=>";
    cin >> numY;
    while (numY % 2 == 0)
    {
        cout << "Invalid! Please enter an odd number" << endl;
        cout << "Enter number of columns=>";
        cin >> numY;
    }
    grid.resize(numX, vector<char>(numY));

    // Place 'A' in the middle of the grid
    int midX = (numX - 1) / 2;
    int midY = (numY - 1) / 2;

    grid[midX][midY] = 'A';
}

void generateInpluto(int &numX, int &numY, vector<vector<char>> &grid)
{
    char objects[] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', '<', '^', '>', 'v', 'h', 'p', 'r', 'p'};
    int noOfObjects = 15; // number of objects in the objects array

    // put random characters into the vector array
    for (int i = 0; i < numX; ++i)
    {
        for (int j = 0; j < numY; ++j)
        {
            if (grid[i][j] != 'A')
            {
                int objNo = rand() % noOfObjects;
                grid[i][j] = objects[objNo];
            }
        }
    }
}

void generateZombies(int &numX, int &numY, vector<vector<char>> &grid)
{
    cout << "==============================" << endl;
    cout << "        Zombie Settings" << endl;
    cout << "==============================" << endl;
    cout << "Number of Zombies (1-9) => ";
    cin >> zombies;

    char objects[9] = {'1', '2', '3', '4', '5', '6', '7', '8', '9'};

    if (zombies > 0 && zombies < 10)
    {
        int generatedZombies = 0;
        while (generatedZombies < zombies)
        {
            int randomIndex = rand() % (numX * numY);
            int x = randomIndex / numY;
            int y = randomIndex % numY;
            if (grid[x][y] != '1', '2', '3', '4', '5', '6', '7', '8', '9')
            {
                grid[x][y] = objects[generatedZombies];
                generatedZombies = generatedZombies + 1;
            }
        }
    }
    else
    {
        cout << "Invalid!" << endl;
        cout << "Please insert the number of zombies between the range 1-9" << endl;
    }
}
void displayBoard(int &numX, int &numY, vector<vector<char>> &grid)
{
    cout << "------------------------------" << endl;
    cout << "|       Alien vs Zombie      |" << endl;
    cout << "------------------------------" << endl;
    for (int i = 0;
         i < numX; i++)
    {
        // display upper border of the Row
        cout << " ";
        cout << " ";
        for (int j = 0; j < numY; j++)
        {
            cout << "+-";
        }
        cout << "+" << endl;
        // display row number
        cout << setw(2) << i + 1;

        for (int j = 0; j < numY; j++)
        {
            cout << "|" << grid[i][j];
        }
        cout << "|" << endl;
    }

    cout << " ";
    cout << " ";
    for (int j = 0; j < numY; j++)
    {
        cout << "+-";
    }
    cout << "+" << endl;

    cout << " ";
    cout << " ";
    for (int j = 0; j < numY; ++j)
    {
        int digit = (j + 1) / 10;
        cout << " ";
        if (digit == 0)
            cout << " ";
        else
            cout << digit;
    }

    cout << endl;
    cout << " ";
    cout << " ";
    for (int j = 0; j < numY; ++j)
    {
        cout << " " << (j + 1) % 10;
    }
    cout << endl
         << endl;
}
void moveCharacter(vector<vector<char>> &grid, int &currentX, int &currentY)
{
    char moveDirection;
    cout << "Enter direction to move (u, d, l, r): ";
    cin >> moveDirection;
    switch (moveDirection)
    {
    case 'u':
        if (currentX > 0)
        { // check if the character is not on the top edge
            grid[currentX][currentY] = ' ';
            grid[currentX][currentY] = '.'; // clear current position
            currentX--;                     // move up
            grid[currentX][currentY] = 'A'; // update new position
        }
        break;
    case 'd':
        if (currentX < grid.size() - 1)
        { // check if the character is not on the bottom edge
            grid[currentX][currentY] = ' ';
            grid[currentX][currentY] = '.';
            currentX++;
            grid[currentX][currentY] = 'A';
        }
        break;
    case 'l':
        if (currentY > 0)
        { // check if the character is not on the left edge
            grid[currentX][currentY] = ' ';
            grid[currentX][currentY] = '.';
            currentY--;
            grid[currentX][currentY] = 'A';
        }
        break;
    case 'r':
        if (currentY < grid[0].size() - 1)
        { // check if the character is not on the right edge
            grid[currentX][currentY] = ' ';
            grid[currentX][currentY] = '.';
            currentY++;
            grid[currentX][currentY] = 'A';
        }
        break;
    }
}

void resetGrid(vector<vector<char>> &grid, int &currentX, int &currentY)
{
    for (int i = 0; i < grid.size(); i++)
    {
        for (int j = 0; j < grid[i].size(); j++)
        {
            if (grid[i][j] == '.' && (i != currentX || j != currentY))
                grid[i][j] = ' ';
        }
    }
}

int main()
{
    int numX, numY;
    vector<vector<char>> grid;
    //welcome void
    welcome();
    cout << "                         ARE YOU READY? " << endl;
    cout << "                press any key if you are ready" << endl;
    _getch();
    system("cls");

    //board
    generateBoard(numX, numY, grid);
    if (numX % 2 == 1 && numY % 2 == 1)
    {
        generateInpluto(numX, numY, grid);
    }
    int currentX = (numX - 1) / 2;
    int currentY = (numY - 1) / 2;
    generateZombies(numX, numY, grid);

    cout << " "<< endl;
    cout << "Settings is updated" << endl;
    cout << "Number of rows=>" << numX << endl;
    cout << "Number of columns=>" << numY << endl;
    cout << "Number of zombies=>" << zombies << endl;
    cout <<" "<< endl;
    cout << "Press any key to continue... " << endl;
    _getch();
    system("cls");
    
    while (true)
    {
        if (zombies > 0 && zombies < 10)
        {
            displayBoard(numX, numY, grid);
        }
        // displayBoard(numX, numY, grid);
        // resetGrid(grid,currentX, currentY);

        moveCharacter(grid, currentX, currentY);
        cout << "Press any key to continue... " << endl;
        _getch();

        system("cls");
    }

    return 0;
}

// #endif
